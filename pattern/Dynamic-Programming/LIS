static int f(int idx, int prev_idx, int n, int a[],
                 int[][] dp)
    {
        if (idx == n) {
            return 0;
        }
 
        if (dp[idx][prev_idx + 1] != -1) {
            return dp[idx][prev_idx + 1];
        }
 
        int notTake = 0 + f(idx + 1, prev_idx, n, a, dp);
        int take = Integer.MIN_VALUE;
        if (prev_idx == -1 || a[idx] > a[prev_idx]) {
            take = 1 + f(idx + 1, idx, n, a, dp);
        }
 
        return dp[idx][prev_idx + 1]
            = Math.max(take, notTake);
    } -- Memoization


class Solution {
    public int lengthOfLIS(int[] nums) {
        
        int dp[] = new int[nums.length];
        
        int max = 1;
        dp[0] = 1;
        for(int i=1;i<nums.length;i++){
            for(int j=i-1;j>=0;j--){
                if(nums[j]<nums[i] && dp[j]+1>dp[i]){
                    dp[i] = dp[j]+1;
                }
                
            }
            if(dp[i] == 0){
                dp[i] = 1;
            }
           // System.out.print(dp[i] + " ");
            max = Math.max(max, dp[i]);
        }
        
        return max;
    }
} -- tabular


Binary Search --- https://www.youtube.com/watch?v=on2hvxBXJH4 -- striver


