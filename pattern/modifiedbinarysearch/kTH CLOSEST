  public static List<Integer> findClosestElements(int[] numbers, int k, int num) {
    List<Integer> list = new ArrayList<Integer>();
    
    // If the length of the array is same as k,
    // return the original array
    if (numbers.length == k) {
      for (int i = 0; i < k; i++) {
        list.add(numbers[i]);
      }
      
      return list;
    }
    
    // Do a binary search to find the element closest to num
    // and initialize two pointers for the sliding window
    int left = BinarySearch.binarySearch(numbers, num);
    int right = left + 1;
    
    // Initialize the pointers for the sliding window
    left -= 1;
    right = left + 1;
    
    // While the sliding window's size is less than k
    while (right - left - 1 < k) {
      // check for out of bounds
      if (left == -1) {
        right += 1;
        continue;
      }
      
      // Expand the window towards the side with the closer number
      // Be careful to not go out of bounds with the pointers
      // |a - x| < |b - x|,
      // |a - x| == |b - x|
      if (right == numbers.length || Math.abs(numbers[left] - num) <= Math.abs(numbers[right] - num)) {
        left -= 1;
      } else {
        right += 1;
      }
    } 

    // Build and return the window
    for (int i = left + 1; i < right; i++) {
      list.add(numbers[i]);
    }
    
    return list;
  }
